{"name":"Delivery Cube Common Module","tagline":"A set of utility classes and components useful for all ATG projects","body":"Delivery Cube Common Module\r\n===================\r\n\r\nThe Delivery Cube Common Module contains utility classes and components useful for all for ATG projects.\r\n\r\n- [The Feature Toggles Project](#the-feature-toggles-project )\r\n    - [What Are Feature Toggles?](#about)\r\n    - [Get the Code](#get-the-code)\r\n    - [Build the Project](#build-the-project)\r\n        - [Add ATG Modules to Maven](#add-atg-modules-to-maven)\r\n    - [Using Feature Toggles](#using-feature-toggles)\r\n    - [Extending Feature Toggles](#extending-feature-toggles)\r\n\r\n\r\n# The Feature Toggles Project\r\n\r\nThe Feature Toggles module contains code and config for a Feature Toggle Service in ATG\r\n\r\n\r\n## What Are Feature Toggles?\r\n\r\nFor a background on Feature Toggles, please read the article by Martin Fowler at \r\nhttp://martinfowler.com/bliki/FeatureToggle.html\r\n\r\n\r\n## Get the Code\r\n\r\nClone the repository with\r\n\r\n    git clone https://github.com/deliverycube/deliverycube-common.git\r\n    \r\nor click on the `Clone in Desktop` button or `Download ZIP` button to get a local copy.\r\n\r\n\r\n## Build the Project\r\nGo to the Feature Toggles project and build with Maven\r\n\r\n    cd .../path/to/deliverycube-common/feature-toggles\r\n    mvn clean install\r\n\r\nThe resultant JAR contains both compiled classes and the appropriate config files, and so can be used as both the \r\nclasses JAR and your config JAR in your ATG module.\r\n\r\n\r\n### Add ATG Modules to Maven\r\n\r\nNote that you will need to have the ATG DAS module added to your Maven repository. \r\nPlease read the article at https://vihung.wordpress.com/2012/05/11/putting-atg-dependencies-in-maven/ to find out more.\r\n\r\n## Using Feature Toggles\r\n\r\nThis project provides a Feature Toggles service that can be used to define which features are toggles or not.\r\n\r\nIn your own module, override the configuration for the `FeatureToggles` service component, and override the `features` \r\nproperty along the lines below\r\n\r\n    # /deliverycube/common/featuretoggles/FeatureToggles\r\n    features=\\\r\n        myFeature1=true,\\\r\n        myFeature2=false,\\\r\n        myFeature3=true\r\n\r\nThis sample above declares that `myFeature1` and `myFeature3` are enabled, whilst `myFeature2` is  explicitly disabled.\r\n\r\nFor any feature that is not explicitly defined in the configuration, the service treats it as disabled. \r\n\r\nThis service is a global component, and can be queried directly from code, along the lines of\r\n\r\n    if(getFeatureToggles().isFeatureToggled(\"myFeature1\")) {\r\n        // code to execute if feature toggle is on\r\n    } else {\r\n        // code to execute if feature toggle is off\r\n    }\r\n      \r\n\r\nThis project also provides a Feature Toggles Droplet that can be used within JSP pages to conditionally render HTML/JSP \r\ncode based on whether a feature is toggled.\r\n\r\n    <dsp:droplet name=\"/deliverycube/common/featuretoggles/FeatureToggleDroplet\">\r\n      <dsp:param name=\"feature\" value=\"myFeature1\"/>\r\n      <dsp:oparam name=\"on\">\r\n        <!-- Content to render if the feature toggle is on -->\r\n      </dsp:oparam>\r\n      <dsp:oparam name=\"off\">\r\n        <!-- Content to render if the feature toggle is off -->\r\n      </dsp:oparam>\r\n    </dsp:droplet>\r\n\r\n\r\n## Extending Feature Toggles\r\nThe Feature Toggles service implements a very simple interface - \r\n`deliverycube.common.atg.featuretoggles.FeatureToggleService`\r\n\r\nThis requires a single method to be implemented\r\n\r\n    /**\r\n     * Determine the value of the feature toggle for the given feature.\r\n     * \r\n     * @param pFeature\r\n     *            the feature\r\n     * @return the feature toggle - <code>true</code> if on, <code>false</code>\r\n     *         if off or unspecified.\r\n     */\r\n    public abstract boolean isFeatureToggled(final String pFeature);\r\n\r\nYou can create your own implementation of the Feature Toggles service by implementing this interface.\r\n\r\nFor example, you may want to create an implementation that uses a versioned repository to hold feature toggles. This \r\nwould allow you to enable or disable features at run-time by deploying new data from the BCC.    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}